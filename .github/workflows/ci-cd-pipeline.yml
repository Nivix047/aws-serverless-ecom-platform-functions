name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # This triggers the workflow when changes are pushed to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Pulls the code from your repository

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2  # Prepares the Docker environment

    - name: Login to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Your AWS Access Key ID from GitHub Secrets
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Your AWS Secret Access Key from GitHub Secrets
        region: ${{ secrets.AWS_REGION }}  # Your AWS Region from GitHub Secrets

    - name: Build Docker image
      run: docker build -t ${{ github.repository }}:${{ github.sha }} .
      # Builds the Docker image using your repository name and commit hash as the tag

    - name: Tag Docker image
      run: docker tag ${{ github.repository }}:${{ github.sha }} ${{ steps.ecr-login.outputs.registry }}/${{ github.repository }}:${{ github.sha }}
      # Tags the image with the Amazon ECR path to prepare for pushing

    - name: Push Docker image to Amazon ECR
      run: docker push ${{ steps.ecr-login.outputs.registry }}/${{ github.repository }}:${{ github.sha }}
      # Pushes the tagged Docker image to your Amazon ECR repository

    - name: Update Lambda function
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}  # Use your AWS Region from GitHub Secrets
      run: |
        aws lambda update-function-code \
          --function-name your-lambda-function-name \  # Replace 'your-lambda-function-name' with your actual Lambda function name
          --image-uri ${{ steps.ecr-login.outputs.registry }}/${{ github.repository }}:${{ github.sha }}
          # Updates the AWS Lambda function to use the new Docker image from Amazon ECR
