name: CI/CD Pipeline

# Trigger the workflow when changes are pushed to the 'main' branch
on:
  push:
    branches:
      - main  # This triggers the workflow when changes are pushed to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # The pipeline will run on the latest version of Ubuntu

    steps:
    # Step 1: Check out the code from the repository
    - name: Checkout code
      uses: actions/checkout@v3  # Pulls the code from your repository

    # Step 2: Set up Docker for building and pushing images
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3  # Prepares the Docker environment for building images

    # Step 3: Login to Amazon ECR using the AWS CLI
    - name: Login to Amazon ECR
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS Access Key ID from GitHub Secrets
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # AWS Secret Access Key from GitHub Secrets
        AWS_REGION: ${{ secrets.AWS_REGION }}  # AWS Region from GitHub Secrets
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      # Logs into Amazon ECR using the AWS CLI and credentials stored in GitHub Secrets

    # Step 4: Build the Docker image using the repository name and commit hash as the tag
    - name: Build Docker image
      run: docker build -t ${{ github.repository }}:${{ github.sha }} .
      # Builds the Docker image using the current repository name and commit hash as the tag

    # Step 5: Tag the Docker image with the Amazon ECR repository path
    - name: Tag Docker image
      run: docker tag ${{ github.repository }}:${{ github.sha }} $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ github.repository }}:${{ github.sha }}
      # Tags the image with the Amazon ECR path to prepare for pushing

    # Step 6: Push the Docker image to Amazon ECR
    - name: Push Docker image to Amazon ECR
      run: docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ github.repository }}:${{ github.sha }}
      # Pushes the tagged Docker image to your Amazon ECR repository

    # Step 7: Update the AWS Lambda function to use the new Docker image
    - name: Update Lambda function
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}  # Use your AWS Region from GitHub Secrets
      run: |
        aws lambda update-function-code \
          --function-name your-lambda-function-name \  # Replace 'your-lambda-function-name' with your actual Lambda function name
          --image-uri $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/${{ github.repository }}:${{ github.sha }}
      # Updates the AWS Lambda function to use the new Docker image from Amazon ECR
